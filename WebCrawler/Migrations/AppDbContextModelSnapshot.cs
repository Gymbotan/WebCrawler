// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebCrawler.Domain;

namespace WebCrawler.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ArticleGeoAttribute", b =>
                {
                    b.Property<Guid>("GeoAttributesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uuid");

                    b.HasKey("GeoAttributesId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("ArticleGeoAttribute");
                });

            modelBuilder.Entity("ArticleOrganizationAttribute", b =>
                {
                    b.Property<Guid>("OrganizationAttributesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uuid");

                    b.HasKey("OrganizationAttributesId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("ArticleOrganizationAttribute");
                });

            modelBuilder.Entity("ArticlePersonAttribute", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonAttributesId")
                        .HasColumnType("uuid");

                    b.HasKey("OwnersId", "PersonAttributesId");

                    b.HasIndex("PersonAttributesId");

                    b.ToTable("ArticlePersonAttribute");
                });

            modelBuilder.Entity("WebCrawler.Domain.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullText")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WebCrawler.Domain.Entities.GeoAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alpha2")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeoAttributes");
                });

            modelBuilder.Entity("WebCrawler.Domain.Entities.OrganizationAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Geo")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganizationAttributes");
                });

            modelBuilder.Entity("WebCrawler.Domain.Entities.PersonAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonAttributes");
                });

            modelBuilder.Entity("ArticleGeoAttribute", b =>
                {
                    b.HasOne("WebCrawler.Domain.Entities.GeoAttribute", null)
                        .WithMany()
                        .HasForeignKey("GeoAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCrawler.Domain.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleOrganizationAttribute", b =>
                {
                    b.HasOne("WebCrawler.Domain.Entities.OrganizationAttribute", null)
                        .WithMany()
                        .HasForeignKey("OrganizationAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCrawler.Domain.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticlePersonAttribute", b =>
                {
                    b.HasOne("WebCrawler.Domain.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCrawler.Domain.Entities.PersonAttribute", null)
                        .WithMany()
                        .HasForeignKey("PersonAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
